// NFA (Nondeterministic Finite Automaton). This is internal module of `RegExp`.
//
// For details, see web pages below.
// - https://swtch.com/~rsc/regexp/regexp1.html
// - https://zenn.dev/canalun/articles/regexp_and_automaton
//
module RegExp.RegExpNFA;

import Hash;
import HashMap;

import RegExp.SimpleParser;
import RegExp.StringEx;
import RegExp.RegExpPattern;

// Type of a matched group.
// The group is represented as two stream positions: `(begin, end)`. 
// `-1` means that the stream position is undefined.
type Group = (I64, I64);

// Type of the array of matched groups.
type Groups = Array Group;

// Type of special quantifiers ID.
// Special quantifiers are quantifieres other than `X?` `X*` `X+`.
// In other words, they are `X{n}` `X{n,}` `X{n,m}` etc.
// Special quantifiers are hard to implement only using node transition,
// so its iteration count are stored in the NFA state, and managed by `sa_quant_*` actions.
type QuantID = I64;

// NFA
type NFA = unbox struct {
    nodes: Array NFANode,     // array of nodes
    initial_node: NodeID,     // initial node
    accepting_node: NodeID,   // accepting node
    group_count: I64,         // group count
    quant_count: I64,         // special quant count
    debug: Bool               // true if debug
};

namespace NFA {
    // An empty NFA.
    empty: NFA;
    empty = NFA {
        nodes: Array::empty(0),
        initial_node: _INVALID_NODE_ID,
        accepting_node: _INVALID_NODE_ID,
        group_count: 0,
        quant_count: 0,
        debug: false
    };

    // Creates new node. Returns the new node id.
    new_node: NFA -> (NFA, NodeID);
    new_node = |nfa| (
        let id = NodeID { val: nfa.@nodes.get_size };
        let node = NFANode::empty;
        let node = node.set_id(id);
        let nfa = nfa.mod_nodes(push_back(node));
        (nfa, id)
    );

    // `nfa.get_node(id)` gets the node whose @id is `id`.
    get_node: NodeID -> NFA -> NFANode;
    get_node = |id, nfa| (
        nfa.@nodes.@(id.@val)
    );

    // `nfa.mod_node(id, f)` modifies the node whose @id is `id`.
    mod_node: NodeID -> (NFANode -> NFANode) -> NFA -> NFA;
    mod_node = |id, f, nfa| (
        nfa.mod_nodes(|nodes| nodes.set(id.@val, f(nodes.@(id.@val))))
    );

    // `nfa.set_frag_output(frag, out)` sets the output of the fragment to `out`.
    set_frag_output: NFAFrag -> NodeID -> NFA -> NFA;
    set_frag_output = |frag, out, nfa| (
        (frag.@set_output)(out, nfa)
    );

    // Creates new quant. Returns the new quant id.
    new_quant: NFA -> (NFA, QuantID);
    new_quant = |nfa| (
        let nfa = nfa.mod_quant_count(|n| n + 1);
        (nfa, nfa.@quant_count - 1)
    );

    // `NFA::compile(pattern)` compiles a pattern to NFA.
    compile: Pattern -> NFA;
    compile = |pattern| (
        // Creates an empty NFA
        let nfa = NFA::empty;
        // Assigns group number to each group in the pattern. 
        let (group_count, pattern) = pattern._assign_group_number(0);
        let nfa = nfa.set_group_count(group_count);
        // Compiles the pattern to a NFA fragment.
        let (nfa, frag) = nfa.compile_pattern(pattern);
        // Sets the input of the fragment to the initial node
        let nfa = nfa.set_initial_node(frag.@input);
        // Creates accepting node and set the output of the fragment to that node
        let (nfa, accept_id) = nfa.new_node;
        let nfa = nfa.set_accepting_node(accept_id);
        let nfa = nfa.set_frag_output(frag, accept_id);
        // Returns the NFA
        eval nfa.debug(nfa.to_string);
        nfa
    );

    // `nfa.execute(target)` executes matching.
    execute: String -> NFA -> NFAExecutor;
    execute = |target, nfa| (
        let stream: Stream = Stream::make(target);
        let executor = NFAExecutor::make(stream, nfa);
        let executor = executor.execute;
        executor
    );

    debug: String -> NFA -> ();
    debug = |msg, nfa| (
        if nfa.@debug { debug_eprintln(msg) } else { () }
    );
}

impl NFA: ToString {
    to_string = |nfa| (
        "NFA { nodes=\n"
        + nfa.@nodes.to_iter.map(|s| "  " + s.to_string + "\n").concat_iter
        + "  initial_node=" + nfa.@initial_node.to_string + "\n"
        + "  accepting_node=" + nfa.@accepting_node.to_string + "\n"
        +"}"
    );
}

// Actions that has to be performed before the state makes a transition to `node.@out_on_action`.
type NFANodeAction = unbox union {
    sa_none: (),
    sa_char_match: CharClass,               // The input character must match to the character class
    sa_assert: PAssertion,                  // The assertion to be checked
    sa_group_begin: I64,                    // The beginning of a group
    sa_group_end: I64,                      // The end of a group
    sa_quant_begin: QuantID,                // The beginning of a special quantifier
    sa_quant_loop: QuantID,                 // The loop of a special quantifier
    sa_quant_end: (QuantID, I64, I64)       // The end of a special quantifier
};

impl NFANodeAction: ToString {
    to_string = |a| (
        if a.is_sa_none { "none" };
        if a.is_sa_char_match { a.as_sa_char_match.to_string };
        if a.is_sa_assert { a.as_sa_assert.to_string };
        if a.is_sa_group_begin { "<g" + a.as_sa_group_begin.to_string + ">" };
        if a.is_sa_group_end { "</g" + a.as_sa_group_end.to_string + ">" };
        if a.is_sa_quant_begin { "<q" + a.as_sa_quant_begin.to_string + ">" };
        if a.is_sa_quant_loop { "<ql" + a.as_sa_quant_loop.to_string + ">" };
        if a.is_sa_quant_end { "</q" + a.as_sa_quant_end.to_string + ">" };
        ""
    );
}

// NFA node
//
// NFA node has one input (ID of this node) and three outputs
// (one output guarded by the action, and two outputs with no guard).
type NFANode = unbox struct {
    id: NodeID,                // ID of this node
    action: NFANodeAction,     // action
    output_on_action: NodeID,  // next node when the action succeeded
    output: NodeID,            // next node with empty string
    output2: NodeID,           // next node with empty string part 2
    label: String              // a label to display
};

// ID of NFA node. -1 is invalid value.
type NodeID = unbox struct {
    val: I64
};

impl NodeID: ToString {
    to_string = |a| a.@val.to_string;
}

impl NodeID: Eq {
    eq = |a, b| a.@val == b.@val;
}

impl NodeID: Hash {
    hash = |a| a.@val.hash;
}

namespace NFANode {
    // An invalid node ID.
    _INVALID_NODE_ID: NodeID;
    _INVALID_NODE_ID = NodeID { val: -1 };

    // An empty node
    empty: NFANode;
    empty = NFANode {
        id: _INVALID_NODE_ID,
        action: sa_none(),
        output_on_action: _INVALID_NODE_ID,
        output: _INVALID_NODE_ID,
        output2: _INVALID_NODE_ID,
        label: ""
    };
}

impl NFANode: ToString {
    to_string = |node| (
        "("
        + node.@id.to_string + ":"
        + node.@action.to_string + ":"
        + node.@output_on_action.to_string + ","
        + node.@output.to_string + ","
        + node.@output2.to_string + ":"
        + node.@label
        + ")"
    );
}


// NFA Fragment
//
// NFA Fragment is a collection of nodes. It exports one input,
// And a function to set the output.
// Internally, the output of a fragment is a collection of outputs of one or more nodes.
// Calling `set_output()` will change them all.
type NFAFrag = unbox struct {
    input: NodeID,                     // NodeID of input of this fragment
    set_output: NodeID -> NFA -> NFA,  // A function to set NodeID of output
                                       // of this fragment
    label: String                      // A label to display (for debugging only)
};

namespace NFAFrag {

    // `nfa.compile_pattern(pattern)` compiles a pattern to a fragment.
    compile_pattern: Pattern -> NFA -> (NFA, NFAFrag);
    compile_pattern = |pat, nfa| (
        if pat.is_pclass {
            let action = sa_char_match (pat.as_pclass);
            nfa._compile_action(action)
        };
        if pat.is_psequence {
            let patterns = pat.as_psequence;
            if patterns.get_size == 0 {
                nfa._compile_null_sequence
            };
            if patterns.get_size == 1 {
                nfa.compile_pattern(patterns.@(0))
            };
            let (nfa, frag1) = nfa.compile_pattern(
                psequence $ patterns.pop_back);
            let (nfa, frag2) = nfa.compile_pattern(
                patterns.get_last.as_some);
            nfa._compile_seq(frag1, frag2)
        };
        if pat.is_peither {
            let (pat1, pat2) = pat.as_peither;
            let (nfa, frag1) = nfa.compile_pattern(pat1);
            let (nfa, frag2) = nfa.compile_pattern(pat2);
            nfa._compile_either(frag1, frag2)
        };
        if pat.is_pquant {
            let (pat1, min, max) = pat.as_pquant;
            let (nfa, frag1) = nfa.compile_pattern(pat1);
            if (min == 0 && max == 1) {
                nfa._compile_zero_or_once(frag1)
            };
            if (min == 0 && max == I64::maximum) {
                nfa._compile_zero_or_more(frag1)
            };
            if (min == 1 && max == I64::maximum) {
                nfa._compile_one_or_more(frag1)
            };
            if (min <= max) {
                nfa._compile_special_quant(frag1, min, max)
            };
            eval assert (|_|"invalid quantifier: (min,max)=" + (min,max).to_string, false);
            (nfa, frag1)
        };
        if pat.is_pgroup {
            let (n, pat1) = pat.as_pgroup;
            let (nfa, frag0) = nfa._compile_action(sa_group_begin(n));
            let (nfa, frag1) = nfa.compile_pattern(pat1);
            let (nfa, frag2) = nfa._compile_action(sa_group_end(n));
            let (nfa, frag) = nfa._compile_seq(frag0, frag1);
            let (nfa, frag) = nfa._compile_seq(frag, frag2);
            (nfa, frag)
        };
        if pat.is_passert {
            nfa._compile_action(sa_assert(pat.as_passert))
        };
        eval assert (|_|"invalid pattern:" + pat.to_string, false);
        nfa._compile_action(sa_none())
    );

    // Compiles an action to a fragment.
    _compile_action: NFANodeAction -> NFA -> (NFA, NFAFrag);
    _compile_action = |action, nfa| (
        let (nfa, id) = nfa.new_node;
        let nfa = nfa.mod_node(id, set_action(action));
        let frag = NFAFrag {
            input: id,
            set_output: |out, nfa| (
                nfa.mod_node(id, set_output_on_action(out))
            ),
            label: action.to_string
        };
        let nfa = nfa.mod_node(id, set_label(frag.@label));
        (nfa, frag)
    );

    // Compiles null sequence (``) to a fragment.
    _compile_null_sequence: NFA -> (NFA, NFAFrag);
    _compile_null_sequence = |nfa| (
        let (nfa, id) = nfa.new_node;
        let frag = NFAFrag {
            input: id,
            set_output: |out, nfa| (
                nfa.mod_node(id, set_output(out))
            ),
            label: "``"
        };
        let nfa = nfa.mod_node(id, set_label(frag.@label));
        (nfa, frag)
    );

    // Compiles a sequence of two fragments (`e1 e2`) to a fragment.
    _compile_seq: NFAFrag -> NFAFrag -> NFA -> (NFA, NFAFrag);
    _compile_seq = |frag1, frag2, nfa| (
        let nfa = nfa.set_frag_output(frag1, frag2.@input);
        let frag = NFAFrag {
            input: frag1.@input,
            set_output: |out, nfa| (
                nfa.set_frag_output(frag2, out)
            ),
            label: frag1.@label + frag2.@label
        };
        (nfa, frag)
    );

    // Compiles an alternative of two fragments (`e1|e2`) to a fragment.
    _compile_either: NFAFrag -> NFAFrag -> NFA -> (NFA, NFAFrag);
    _compile_either = |frag1, frag2, nfa| (
        let (nfa, id) = nfa.new_node;
        let nfa = nfa.mod_node(id, set_output(frag1.@input));
        let nfa = nfa.mod_node(id, set_output2(frag2.@input));
        let frag = NFAFrag {
            input: id,
            set_output: |out, nfa| (
                nfa.set_frag_output(frag1, out)
                   .set_frag_output(frag2, out)
            ),
            label: frag1.@label + "|" + frag2.@label
        };
        let nfa = nfa.mod_node(id, set_label(frag.@label));
        (nfa, frag)

    );

    // Compiles zero or once occurrence (`e?`) to a fragment.
    _compile_zero_or_once: NFAFrag -> NFA -> (NFA, NFAFrag);
    _compile_zero_or_once = |frag1, nfa| (
        let (nfa, id) = nfa.new_node;
        let nfa = nfa.mod_node(id, set_output(frag1.@input));
        let frag = NFAFrag {
            input: id,
            set_output: |out, nfa| (
                let nfa = nfa.set_frag_output(frag1, out);
                nfa.mod_node(id, set_output2(out))
            ),
            label: frag1.@label + "?"
        };
        let nfa = nfa.mod_node(id, set_label(frag.@label));
        (nfa, frag)
    );

    // Compiles zero or more occurrence (`e*`) to a fragment.
    _compile_zero_or_more: NFAFrag -> NFA -> (NFA, NFAFrag);
    _compile_zero_or_more = |frag1, nfa| (
        let (nfa, id) = nfa.new_node;
        let nfa = nfa.mod_node(id, set_output(frag1.@input));
        let nfa = nfa.set_frag_output(frag1, id);
        let frag = NFAFrag {
            input: id,
            set_output: |out, nfa| (
                nfa.mod_node(id, set_output2(out))
            ),
            label: frag1.@label + "*"
        };
        let nfa = nfa.mod_node(id, set_label(frag.@label));
        (nfa, frag)
    );

    // Compiles one or more occurrence (`e+`) to a fragment.
    _compile_one_or_more: NFAFrag -> NFA -> (NFA, NFAFrag);
    _compile_one_or_more = |frag1, nfa| (
        let (nfa, id) = nfa.new_node;
        let nfa = nfa.mod_node(id, set_output(frag1.@input));
        let nfa = nfa.set_frag_output(frag1, id);
        let frag = NFAFrag {
            input: frag1.@input,
            set_output: |out, nfa| (
                nfa.mod_node(id, set_output2(out))
            ),
            label: frag1.@label + "+"
        };
        let nfa = nfa.mod_node(id, set_label(frag.@label));
        (nfa, frag)
    );

    // Compiles special quant (`e{min,max}`) to a fragment.
    _compile_special_quant: NFAFrag -> I64 -> I64 -> NFA -> (NFA, NFAFrag);
    _compile_special_quant = |frag1, min, max, nfa| (
        let (nfa, qid) = nfa.new_quant;
        let (nfa, branch_id) = nfa.new_node;
        let nfa = nfa.mod_node(branch_id, set_label("branch(q" + qid.to_string + ")"));
        let (nfa, frag_begin) = nfa._compile_action(sa_quant_begin $ qid);
        let (nfa, frag_loop) = nfa._compile_action(sa_quant_loop $ qid);
        let (nfa, frag_end) = nfa._compile_action(sa_quant_end $ (qid, min, max));
        let nfa = nfa.set_frag_output(frag_begin, branch_id);
        let nfa = nfa.mod_node(branch_id, set_output(frag1.@input));
        let nfa = nfa.mod_node(branch_id, set_output2(frag_end.@input));
        let nfa = nfa.set_frag_output(frag1, frag_loop.@input);
        let nfa = nfa.set_frag_output(frag_loop, branch_id);
        let frag = NFAFrag {
            input: frag_begin.@input,
            set_output: |out, nfa| (
                nfa.set_frag_output(frag_end, out)
            ),
            label: frag1.@label + "{" + min.to_string + "," + max.to_string + "}"
        };
        (nfa, frag)
    );
}

// NFA state
type NFAState = unbox struct {
    id: NodeID,         // NodeID where this state currently stays
    groups: Groups,     // Captured groups
    quants: Array I64   // Special quantifier counters
};

impl NFAState: Eq {
    eq = |a, b| a.@id == b.@id && a.@groups == b.@groups && a.@quants == b.@quants;
}

impl NFAState: Hash {
    hash = |s| (
        s.@id.hash * 103231_U64 +
        s.@groups.hash * 103577_U64 +
        s.@quants.hash * 103769_U64
    );
}

impl NFAState: ToString {
    to_string = |s| (
        "{id:" + s.@id.to_string + 
        ", groups=" + s.@groups.to_string + 
        ", quants=" + s.@quants.to_string +
        "}"
    );
}

namespace NFAState {
    // Creates a NFA state.
    make: NodeID -> Groups -> NFAState;
    make = |id, groups| NFAState {
        id: id,
        groups: groups,
        quants: Array::empty(0)
    };

    // Makes transition to next node.
    transition: NodeID -> NFAState -> NFAState;
    transition = set_id;

    // Gets specified group. If group index is out of range, returns (-1, -1).
    get_group: I64 ->  NFAState -> Group;
    get_group = |group_idx, state| (
        if group_idx < 0 || state.@groups.get_size <= group_idx {
            (-1, -1)
        };
        state.@groups.@(group_idx)
    );

    // Modify specified group.
    mod_group: I64 -> (Group -> Group) -> NFAState -> NFAState;
    mod_group = |group_idx, f, state| (
        state.mod_groups(mod(group_idx, f))
    );

    // get quant loop count
    get_quant: QuantID -> NFAState -> I64;
    get_quant = |qid, state| (
        if state.@quants.get_size <= qid {
            0
        };
        state.@quants.@(qid)
    );

    // set quant loop count
    set_quant: QuantID -> I64 -> NFAState -> NFAState;
    set_quant = |qid, val, state| (
        if state.@quants.get_size <= qid {
            state.mod_quants(push_back(0)).set_quant(qid, val)
        };
        state.mod_quants(set(qid, val))
    );

    overlaps: NFAState -> NFAState -> Bool;
    overlaps = |a, b| (
        let (a_begin, a_end) = a.@groups.@(0);
        let (b_begin, b_end) = b.@groups.@(0);
        if a_end <= b_begin || b_end <= a_begin { false };
        true
    );

    // Gets the length of specified group.
    group_length: I64 -> NFAState -> I64;
    group_length = |i, state| (
        let groups = state.@groups;
        if i < 0 || groups.get_size <= i { 0 };
        let group = groups.@(i);
        let (begin, end) = group;
        if begin < 0 || end < 0 || begin >= end { 0 };
        end - begin
    );

    // Collects first match.
    collect_first_match: Array NFAState -> Option NFAState;
    collect_first_match = |states| (
        let states = states._sort_by_group0_begin_and_length;
        states.get_first
    );

    // Collects all non overlapping matches.
    collect_all_non_overlapping: Array NFAState -> Array NFAState;
    collect_all_non_overlapping = |states| (
        let states = states._sort_by_group0_begin_and_length;
        let output = Array::empty(states.get_size);
        states.to_iter.fold(
            output, |output, a|
            if output.is_empty {
                output.push_back(a)
            };
            if !output.get_last.as_some.overlaps(a) {
                output.push_back(a)
            };
            output
        )
    );

    // Sorts states by beginning of group 0 (ascending order)
    // and length of group 0 (descending order).
    _sort_by_group0_begin_and_length: Array NFAState -> Array NFAState;
    _sort_by_group0_begin_and_length = |states| (
        let state_less_than: (NFAState, NFAState) -> Bool = |(a, b)| (
            let (a_begin, a_end) = a.get_group(0);
            let (b_begin, b_end) = b.get_group(0);
            if a_begin == -1 || a_end == -1 { true };
            if b_begin == -1 || b_end == -1 { false };
            // compare begin (asc)
            if a_begin < b_begin { true };
            if a_begin > b_begin { false };
            // compare length (desc)
            a_end - a_begin > b_end - b_begin
        );
        states.sort_by(state_less_than)
    );
}

// NFA state set, used for NFA state transition
type NFAStateSet = unbox struct {
    array: Array NFAState,              // array of states
    map: HashMap NFAState Bool          // a hashmap to check whether the state is contained or not
};

namespace NFAStateSet {

    // `NFAStateSet::empty(node_count)` creates an empty state set.
    // `node_count` is number of NFA nodes.
    empty: I64 -> NFAStateSet;
    empty = |node_count| NFAStateSet {
        array: Array::empty(node_count),
        map:  HashMap::empty(node_count)
    };

    // Checks whether the state set is empty.
    is_empty: NFAStateSet -> Bool;
    is_empty = |state_set| (
        state_set.@array.is_empty
    );

    // Checks whether the state set contains a state.
    contains: NFAState -> NFAStateSet -> Bool;
    contains = |state, state_set| (
        state_set.@map.contains_key(state)
    );

    // Adds a state to the state set.
    add: NFAState -> NFAStateSet -> NFAStateSet;
    add = |state, state_set| (
        if state_set.contains(state) {
            state_set
        };
        state_set.mod_array(push_back(state))
                 .mod_map(insert(state, true))
    );

    // Returns an iterator of the states.
    to_iter: NFAStateSet -> Iterator NFAState;
    to_iter = |state_set| (
        state_set.@array.to_iter
    );
}

// The NFA executor
type NFAExecutor = unbox struct {
    stream: Stream,                     // stream of characters
    nfa: NFA,                           // NFA
    empty_state_set: NFAStateSet,       // an empty state set
    state_set: NFAStateSet,             // current state set
    stack: Iterator NFAState,           // temporary stack for transition
    accepted_states: NFAStateSet        // accepted states
};

namespace NFAExecutor {
    // Creates an executor.
    make: Stream -> NFA -> NFAExecutor;
    make = |stream, nfa| (
        let empty_state_set = NFAStateSet::empty(nfa.@nodes.get_size);
        let groups: Groups = Array::fill(nfa.@group_count, (-1, -1));
        let initial_state = NFAState::make(nfa.@initial_node, groups);
        let state_set = empty_state_set.add(initial_state);
        NFAExecutor {
            stream: stream,
            nfa: nfa,
            empty_state_set: empty_state_set,
            state_set: state_set,
            stack: Iterator::empty,
            accepted_states: empty_state_set
        }
    );

    // Make transitions until end of stream is reached, or the state set becomes empty.
    execute: NFAExecutor -> NFAExecutor;
    execute = |executor| (
        if executor.@state_set.is_empty {
            executor
        };
        let executor = executor._transition_with_empty_string;
        let executor = executor._check_for_accepting_state;
        let opt = executor.@stream.advance;
        if opt.is_none {
            executor
        };
        let (char, stream) = opt.as_some;
        eval executor.@nfa.debug("stream position="+stream.@position.to_string + " char='" + byte_to_string(char) + "'");
        let executor = executor._transition_with_char(char);
        let executor = executor.set_stream(stream);
        executor.execute    // tail recursion
    );

    // Checks for accepting state
    _check_for_accepting_state: NFAExecutor -> NFAExecutor;
    _check_for_accepting_state = |executor| (
        let accepting_node = executor.@nfa.@accepting_node;
        let accepting_states = executor.@state_set.to_iter
            .filter(|state| state.@id == accepting_node);
        let add_all = accepting_states.fold(|x|x, |f, state|
            f >> NFAStateSet::add(state)
        );
        executor.mod_accepted_states(add_all)        
    );

    // Applies transitions with an empty string.
    _transition_with_empty_string: NFAExecutor -> NFAExecutor;
    _transition_with_empty_string = |executor| (
        eval executor.@nfa.debug("_transition_with_empty_string");
        let executor = executor.set_stack(executor.@state_set.to_iter);
        loop(
            executor, |executor|
            let opt = executor._pop_stack;
            if opt.is_none {
                break $ executor
            };
            let (state, executor) = opt.as_some;
            let node = executor.@nfa.get_node(state.@id);
            let executor = executor._add_to_state_set_and_stack(state.transition(node.@output));
            let executor = executor._add_to_state_set_and_stack(state.transition(node.@output2));
            let executor = executor._transition_on_action(node, state.transition(node.@output_on_action));
            continue $ executor
        )
    );

    _pop_stack: NFAExecutor -> Option (NFAState, NFAExecutor);
    _pop_stack = |executor| (
        executor.@stack.advance.map(|(state, next)|
            (state, executor.set_stack(next))
        )
    );

    // Adds a state to the state set if not added yet, then pushes the state to the stack.
    _add_to_state_set_and_stack: NFAState -> NFAExecutor -> NFAExecutor;
    _add_to_state_set_and_stack = |state, executor| (
        if state.@id == _INVALID_NODE_ID {
            executor
        };
        if executor.@state_set.contains(state) {
            executor
        };
        eval executor.@nfa.debug("transition " + state.to_string);
        executor
            .mod_state_set(add(state))
            .mod_stack(push_front(state))
    );

    // Applies transitions on an action with empty string.
    _transition_on_action: NFANode -> NFAState -> NFAExecutor -> NFAExecutor;
    _transition_on_action = |old_node, state, executor| (
        eval executor.@nfa.debug("_transition_on_action");
        let action = old_node.@action;
        if action.is_sa_assert {
            let pa = action.as_sa_assert;
            if pa.is_pa_begin && executor.@stream.@position == 0 {
                executor._add_to_state_set_and_stack(state)
            };
            if pa.is_pa_end && executor.@stream.@iter.is_empty {
                executor._add_to_state_set_and_stack(state)
            };
            executor
        };
        if action.is_sa_group_begin {
            let group_idx = action.as_sa_group_begin;
            let begin = executor.@stream.@position;
            let state = state.mod_group(group_idx, |_| (begin, -1));
            executor._add_to_state_set_and_stack(state)
        };
        if action.is_sa_group_end {
            let group_idx = action.as_sa_group_end;
            let end = executor.@stream.@position;
            let state = state.mod_group(group_idx, |(begin, _)| (begin, end));
            executor._add_to_state_set_and_stack(state)
        };
        if action.is_sa_quant_begin {
            let qid = action.as_sa_quant_begin;
            let state = state.set_quant(qid, 0);
            executor._add_to_state_set_and_stack(state)
        };
        if action.is_sa_quant_loop {
            let qid = action.as_sa_quant_loop;
            let count = state.get_quant(qid);
            let state = state.set_quant(qid, count + 1);
            executor._add_to_state_set_and_stack(state)
        };
        if action.is_sa_quant_end {
            let (qid, min_count, max_count) = action.as_sa_quant_end;
            let count = state.get_quant(qid);
            if count < min_count || max_count < count {
                executor
            };
            let state = state.set_quant(qid, count);
            executor._add_to_state_set_and_stack(state)
        };
        executor
    );

    // Applies transitions with a string of one character.
    _transition_with_char: U8 -> NFAExecutor -> NFAExecutor;
    _transition_with_char = |char, executor| (
        eval executor.@nfa.debug("_transition_with_char");
        let old_state_set = executor.@state_set;
        let executor = old_state_set.to_iter.fold(
            // Clear new state set
            executor.set_state_set(executor.@empty_state_set),
            |executor, state|
            // For each old state:
            let node = executor.@nfa.get_node(state.@id);
            let action = node.@action;
            if !action.is_sa_char_match {
                executor
            };
            if !action.as_sa_char_match.contains(char) {
                executor
            };

            // note: stack is not used
            executor._add_to_state_set_and_stack(state.transition(node.@output_on_action))
        );
        let executor = executor.set_stack(Iterator::empty);
        executor
    );
}

// A replacement fragment
type ReplaceFrag = unbox union {
    rep_literal: U8,
    rep_group: I64
};

namespace Replacement {

    // Compiles a replacement string to fragments.
    compile: String -> Array ReplaceFrag;
    compile = |replacement| (
        let res = _parse_replacement_seq.run_parser_str(replacement);
        eval assert(|_|"_parse_replacement_seq failed", res.is_ok);
        let (reps, _) = res.as_ok;
        reps
    );

    // Calculates actual replacement string.
    calc_replacement: String -> Array ReplaceFrag -> NFAState -> String;
    calc_replacement = |target, rep_frags, state| (
        let output: Array U8 = Array::empty(target.get_size + rep_frags.get_size);
        let output = rep_frags.to_iter.fold(
            output, |output, rep|
            if rep.is_rep_literal {
                output.push_back(rep.as_rep_literal)
            };
            if rep.is_rep_group {
                let group_idx = rep.as_rep_group;
                let (begin, end) = state.get_group(group_idx);
                let str = target.substring(begin, end);
                output.append(str.get_bytes.pop_back)
            };
            eval assert(|_|"err", false);
            output
        );
        output._unsafe_to_string
    );

    _parse_replacement_seq: Parser (Array ReplaceFrag);
    _parse_replacement_seq = do {
        repeat(
            _parse_dollar
            .or_else(_parse_literal)
        )
    };

    _parse_dollar: Parser ReplaceFrag;
    _parse_dollar = do {
        let _ = *match_char('$');
        
        let dollar = *match_char_if_exists('$');    // $$
        if dollar.is_some {
            pure $ rep_literal('$')
        };

        let ampasand = *match_char_if_exists('&');    // $&
        if ampasand.is_some {
            pure $ rep_group(0)
        };

        // TODO: support $`, $', $<Name>

        let num = *match_integer.map(some).or_else(pure $ none());    // $n
        if num.is_some {
            pure $ rep_group(num.as_some)
        };

        //error_parser $ "invalid dollar"
        not_match
    };

    _parse_literal: Parser ReplaceFrag;
    _parse_literal = do {
        match_any_char.map(rep_literal)
    };
}