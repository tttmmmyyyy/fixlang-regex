// Simple regular expression.
//
// Currently it only supports patterns below:
// - Character classes: `[xyz]`, `[^xyz]`, `.`, `\d`, `\D`, `\w`, `\W`, `\s`,
//   `\S`, `\t`, `\r`, `\n`, `\v`, `\f`, `[\b]`, `x|y`
// - Assertions: `^`, `$`
// - Groups: `(x)`
// - Quantifiers: `x*`, `x+`, `x?`, `x{n}`, `x{n,}`, `x{n,m}`
//
// For details, see
// [mdn web docs: Regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions).
//
// LIMITATION:
//
// Currently, only single byte characters (U+0001..U+007F) can be specified in character classes.
// Non-ASCII characters (U+0080..U+10FFFF) are encoded to two or more bytes in UTF-8, so they cannot be specified in character classes.
// And the null character (U+0000) cannot be used in Fix strings.
//
module RegExp;


import RegExp.StringEx;
import RegExp.RegExpPattern;
import RegExp.RegExpNFA;

// Type of a compiled regular expression.
type RegExp = unbox struct {
    flags: String, 
    nfa: NFA
};

namespace RegExp {

    // `RegExp::compile(pattern, flags)` compiles `pattern` into a regular expression.
    // `flags` change behavior of regular expression matching.
    // Currently only global flag (`"g"`) is supported.
    compile: String -> String -> Result ErrMsg RegExp;
    compile = |pattern_str, flags| (
        let pattern = *Pattern::parse(pattern_str);
        let pattern = pgroup $ (0, pattern); // since whole pattern is group 0
        // add ".*" in front of pattern
        let pattern = psequence $ [*Pattern::parse(".*"), pattern];
        let nfa = NFA::compile(pattern);
        ok $ RegExp { flags: flags, nfa:nfa }
    );

    // `regexp.match(target)` matches `target` against `regexp`.
    //
    // If the global flag (`"g"`) is not set, it returns an array of the groups of the first match.
    // Group 0 is a substring that matches the entire regular expression.
    // Group 1 and beyond are the captured substrings in each group. If not captured, the group will be an empty string.
    //
    // Example:
    // ```
    // let regexp = RegExp::compile("[a-z]+([0-9]+)", "").as_ok;
    // let groups = regexp.match("abc012 def345").as_ok;
    // // groups == ["abc012", "012"]
    // ```
    //
    // If the global flag (`"g"`) is set, all matching results will be returned, but captured groups will not be included.
    //
    // Example:
    // ```
    // let regexp = RegExp::compile("[a-z]+([0-9]+)", "g").as_ok;
    // let groups = regexp.match("abc012 def345").as_ok;
    // // groups == ["abc012", "def345"]
    // ```
    //
    // If the match against the regular expression fails, an error `"NotMatch"` is reported.
    //
    // This function is similar to [String.match()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/match)
    // function of JavaScript.
    match: String -> RegExp -> Result ErrMsg (Array String);
    match = |target, regexp| (
        let executor = regexp.@nfa.execute(target);
        let states: Array NFAState = executor.@accepted_states.to_iter.to_array;
        if regexp.@flags.find_byte('g').is_some {
            let states = collect_all_non_overlapping(states);
            let groups0 = states.to_iter.map(|state| state.@groups.@(0)).to_array;
            if groups0.is_empty {
                err $ "NotMatch"
            };
            ok $ target._convert_groups_to_string(groups0)
        } else {
            let opt = collect_first_match(states);
            if opt.is_none {
                err $ "NotMatch"
            };
            let state = opt.as_some;
            let groups = state.@groups;
            ok $ target._convert_groups_to_string(groups)
        }
    );

    _convert_groups_to_string: Array Group -> String -> Array String;
    _convert_groups_to_string = |groups, target| (
        groups.to_iter.map(|(begin, end)|
            if begin < 0 || end < 0 { "" };
            target.substring(begin, end)
        ).to_array
    );

    // `regexp.match_all(target)` matches `target` against `regexp`.
    // All matching results will be returned including captured groups.
    //
    // If the match against the regular expression fails, an empty array is returned.
    //
    // This function is similar to [String.matchAll()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)
    // function of JavaScript.
    match_all: String -> RegExp -> Array (Array String);
    match_all = |target, regexp| (
        let executor = regexp.@nfa.execute(target);
        let states: Array NFAState = executor.@accepted_states.to_iter.to_array;
        let states = collect_all_non_overlapping(states);
        let groups_array = states.to_iter.map(|state| 
            target._convert_groups_to_string(state.@groups)
        ).to_array;
        groups_array
    );

    // `regexp.replace_all(target, replacement)` matches `target` against `regexp`,
    // and replace all matching substrings with `replacement`.
    // If `replacement` contains `$&`, it is substituted with entire matched substring.
    // If `replacement` contains `$n` where `n` is an integer, it is substituted with
    // the captured group.
    // If `replacement` contains `$$`, it is substituted with single `$`.
    //
    // Example:
    // ```
    // let regexp = RegExp::compile("(\\w\\w)(\\w)", "").as_ok;
    // let result = regexp.replace_all("abc def ijk", "$2$1");
    // // result == "cab fde kij"
    // ```
    //
    // This function is similar to [String.replaceAll()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll)
    // function of JavaScript.
    // Note that `$'`, `` $` ``, `$<Name>` are not supported yet.
    replace_all: String -> String -> RegExp -> String;
    replace_all = |target, replacement, regexp| (
        let executor = regexp.@nfa.execute(target);
        let states: Array NFAState = executor.@accepted_states.to_iter.to_array;
        let states = collect_all_non_overlapping(states);
        let rep_frags = Replacement::compile(replacement);
        let output: Array String = Array::empty(0);
        let (output, last) = states.to_iter.fold(
            (output, 0), |(output, last), state|
            let (begin, end) = state.@groups.@(0);
            let output = output.push_back(target.substring(last, begin));
            let output = output.push_back(calc_replacement(target, rep_frags, state));
            (output, end)
        );
        let output = output.push_back(target.substring(last, target.get_size));
        output.to_iter.concat_iter
    );
}